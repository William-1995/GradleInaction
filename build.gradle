import java.time.Instant
//buildscript {
//    repositories {
//        mavenCentral()
//    }
//
//    dependencies {
//        classpath group: 'com.jayway.jsonpath', name:'json-path', version: '2.8.0'
//    }
//}

// plugins
plugins {
    id 'groovy'
    id 'java-library'

    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id "com.google.cloud.tools.jib" version "3.3.2"
}

//println com.jayway.jsonpath.JsonPath.JsonPath.parse(Map.of("k", "v"))


group = 'com.learning'
version = '0.1'

// Config the gradle wrapper ./gradlew  wrapper
tasks.withType Wrapper, { gradleVersion='8.6'}

repositories {
    mavenCentral()
    maven {
        url "https://gitlab.com/api/v4/projects/45430684/packages/maven"
    }
}

dependencies {
    implementation "de.elvah.plugin:platform-repository-plugin:1.0.2-SNAPSHOT"
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.apache.groovy:groovy:4.0.2'
    // Declares a dependency on a platform. If the target coordinates represent multiple potential components, the platform component will be selected, instead of the library.
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.4.0'
}

apply from: "myTask.gradle"

//allprojects {
//    apply plugin:'java-library'
//    println "current project name: $it"
//}

//subprojects {
//    repositories {
//        mavenCentral()
//    }
//
//    dependencies {
//        testImplementation platform('org.junit:junit-bom:5.9.1')
//        testImplementation 'org.junit.jupiter:junit-jupiter'
//    }
//}

//project("sub-projects:sub-project2") {
//    repositories {
//        mavenCentral()
//    }
//
//    dependencies {
//        testImplementation platform('org.junit:junit-bom:5.9.1')
//        testImplementation 'org.junit.jupiter:junit-jupiter'
//    }
//}

tasks.withType(Test) {
    useJUnitPlatform()
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 4, 'hours'
}

//tasks.withType(Test).configureEach {
//    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
//}

tasks.withType(BuildType).configureEach {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

java {
    // sourceCompatibility(JavaVersion.VERSION_17)
    // targetCompatibility(JavaVersion.VERSION_17)
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// Make sure the build task dependent on the jib's execution result.
tasks {
    build {
        dependsOn(tasks.jib)
    }
}

jib{
// If need.
//    from {
//
//    }
    to {
        image = "willl1995/jib:latest"
        tags = ['latest']
        auth {
            username="willl1995"
            password="<password>"
        }
    }
// Container configuration.
    container {
        mainClass="com.gradle.demo.SpringBootApplication"
        jvmFlags = [
                "-server",
                "-Duser.timezone=UTC",
                "-Xms128m",
                "-Xmx1g"]
        args = []
        creationTime = Instant.now().toString()
        ports = ['8080']
        format = com.google.cloud.tools.jib.api.buildplan.ImageFormat.OCI
    }
    targetCompatibility = 21
}

/**
 * Run docker commands to start the jib.
 *  1. ./gradlew clean build -x test jib
 *  2. docker pull willl1995/jib:latest
 *  3. docker run -p 8080:8080 --name jib-demo willl1995/jib
 *
 * Run docker commands to start the jib (Not push to remote)
 *  1. ./gradlew clean build -x test jibDockerBuild
 *  2.docker run -p 8080:8080 --name jib-demo willl1995/jib
 *
 * Push to personal docker repository
 * 1. Set [allowInsecureRegistries = true]
 * 2. Remove auth
 * 3. Create personal docker repository
 *      docker run -d -p 5000:5000 --name registry
 *      http://localhost:5000/v2/_catalog
 * 4. ./gradlew clean build -x test jib
 * 5. docker run -p 8080:8080 --name jib localhost:5000/jib
 */
